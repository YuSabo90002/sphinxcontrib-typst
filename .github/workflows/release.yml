name: Release

on:
  push:
    tags:
      - 'v*'  # Trigger on version tags (e.g., v0.1.0, v0.2.0b1)
  workflow_dispatch:
    inputs:
      tag:
        description: 'Tag to release (e.g., v0.1.0)'
        required: true

permissions:
  contents: write  # Required for creating releases
  id-token: write  # Required for PyPI trusted publishing

jobs:
  # Validate the release before publishing
  validate:
    name: Validate Release
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v5
        with:
          fetch-depth: 0  # Fetch all history for version validation

      - name: Install uv
        uses: astral-sh/setup-uv@v7
        with:
          version: "latest"

      - name: Set up Python
        run: uv python install 3.11

      - name: Install dependencies
        run: uv sync --extra dev

      - name: Extract version from tag
        id: version
        run: |
          if [ "${{ github.event_name }}" == "workflow_dispatch" ]; then
            TAG="${{ github.event.inputs.tag }}"
          else
            TAG="${GITHUB_REF#refs/tags/}"
          fi
          VERSION="${TAG#v}"
          echo "tag=$TAG" >> $GITHUB_OUTPUT
          echo "version=$VERSION" >> $GITHUB_OUTPUT

      - name: Verify version matches pyproject.toml
        run: |
          PYPROJECT_VERSION=$(uv run python -c "import tomllib; print(tomllib.load(open('pyproject.toml', 'rb'))['project']['version'])")
          TAG_VERSION="${{ steps.version.outputs.version }}"
          echo "pyproject.toml version: $PYPROJECT_VERSION"
          echo "Tag version: $TAG_VERSION"
          if [ "$PYPROJECT_VERSION" != "$TAG_VERSION" ]; then
            echo "::error::Version mismatch: pyproject.toml has $PYPROJECT_VERSION but tag is $TAG_VERSION"
            exit 1
          fi

      - name: Run tests
        run: uv run pytest tests/ -v

      - name: Run linters
        run: |
          uv run black --check .
          uv run ruff check .

      - name: Type check
        run: uv run mypy typsphinx/

  # Build the distribution packages
  build:
    name: Build Distribution
    needs: validate
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v5

      - name: Install uv
        uses: astral-sh/setup-uv@v7
        with:
          version: "latest"

      - name: Set up Python
        run: uv python install 3.11

      - name: Build package
        run: uv build

      - name: Check package
        run: |
          uv sync --extra dev
          uv run twine check dist/*

      - name: List built files
        run: ls -lh dist/

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: dist-packages
          path: dist/
          retention-days: 7

  # Publish to PyPI (requires PyPI API token or trusted publishing)
  publish-pypi:
    name: Publish to PyPI
    needs: build
    runs-on: ubuntu-latest
    environment:
      name: pypi
      url: https://pypi.org/p/typsphinx
    steps:
      - name: Download build artifacts
        uses: actions/download-artifact@v6
        with:
          name: dist-packages
          path: dist/

      - name: Publish to PyPI
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          password: ${{ secrets.PYPI_API_TOKEN }}

  # Create GitHub Release
  create-release:
    name: Create GitHub Release
    needs: [build, publish-pypi]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v5
        with:
          fetch-depth: 0

      - name: Download build artifacts
        uses: actions/download-artifact@v6
        with:
          name: dist-packages
          path: dist/

      - name: Extract version from tag
        id: version
        run: |
          if [ "${{ github.event_name }}" == "workflow_dispatch" ]; then
            TAG="${{ github.event.inputs.tag }}"
          else
            TAG="${GITHUB_REF#refs/tags/}"
          fi
          echo "tag=$TAG" >> $GITHUB_OUTPUT

      - name: Generate release notes
        id: notes
        run: |
          TAG="${{ steps.version.outputs.tag }}"

          # Get previous tag
          PREV_TAG=$(git describe --tags --abbrev=0 $TAG^ 2>/dev/null || echo "")

          # Generate changelog
          if [ -n "$PREV_TAG" ]; then
            echo "## Changes since $PREV_TAG" > release_notes.md
            echo "" >> release_notes.md
            git log $PREV_TAG..$TAG --pretty=format:"- %s (%h)" >> release_notes.md
          else
            echo "## Initial Release" > release_notes.md
          fi

          echo "" >> release_notes.md
          echo "## Installation" >> release_notes.md
          echo "" >> release_notes.md
          echo '```bash' >> release_notes.md
          echo "pip install typsphinx==${TAG#v}" >> release_notes.md
          echo '```' >> release_notes.md

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ steps.version.outputs.tag }}
          name: Release ${{ steps.version.outputs.tag }}
          body_path: release_notes.md
          files: dist/*
          draft: false
          prerelease: ${{ contains(steps.version.outputs.tag, 'a') || contains(steps.version.outputs.tag, 'b') || contains(steps.version.outputs.tag, 'rc') }}
          generate_release_notes: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  # Publish to TestPyPI (optional, for testing)
  publish-testpypi:
    name: Publish to TestPyPI (Optional)
    needs: build
    runs-on: ubuntu-latest
    if: |
      contains(github.ref, 'beta') ||
      contains(github.ref, 'alpha') ||
      contains(github.ref, 'rc') ||
      contains(inputs.tag, 'beta') ||
      contains(inputs.tag, 'alpha') ||
      contains(inputs.tag, 'rc')
    environment:
      name: testpypi
      url: https://test.pypi.org/p/typsphinx
    steps:
      - name: Download build artifacts
        uses: actions/download-artifact@v6
        with:
          name: dist-packages
          path: dist/

      - name: Publish to TestPyPI
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          password: ${{ secrets.TEST_PYPI_API_TOKEN }}
          repository-url: https://test.pypi.org/legacy/
